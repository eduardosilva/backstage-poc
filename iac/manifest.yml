apiVersion: v1
kind: Namespace
metadata:
  name: backstage
  labels:
    purpose: backstage-app
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: selfsigned-issuer
  namespace: backstage 
spec:
  selfSigned: {}
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secrets
  namespace: backstage
  labels:
    app: postgres 
type: Opaque
data:
  POSTGRES_USER: YmFja3N0YWdl # base64 encoded value for 'backstage'
  POSTGRES_PASSWORD: YmFja3N0YWdl # base64 encoded value for 'backstage'
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-storage-claim
  namespace: backstage
  labels:
    app: postgres 
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-storage
  namespace: backstage
  labels:
    type: local
    app: postgres 
spec:
  storageClassName: manual
  capacity:
    storage: 2Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: '/mnt/data'
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: backstage
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:13.2-alpine
          imagePullPolicy: 'IfNotPresent'
          ports:
            - containerPort: 5432
          envFrom:
            - secretRef:
                name: postgres-secrets
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgresdb
              subPath: data
      volumes:
        - name: postgresdb
          persistentVolumeClaim:
            claimName: postgres-storage-claim
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: backstage
spec:
  selector:
    app: postgres
  ports:
    - port: 5432
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: backstage-config
  namespace: backstage
data: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backstage
  namespace: backstage
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backstage
  template:
    metadata:
      labels:
        app: backstage
    spec:
      containers:
        - name: backstage
          image: backstage:1.0.0
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 7007
          envFrom:
            - secretRef:
                name: postgres-secrets
          env:
            - name: POSTGRES_HOST
              value: "postgres"  
            - name: POSTGRES_PORT
              value: "5432" 
            - name: NODE_ENV # TEMP TO FIX AUTH PLUGIN ERROR https://backstage.io/docs/auth/troubleshooting/#sign-in-fails-with--provider-is-not-configured-to-support-sign-in
              value: "development"
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-secrets
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secrets
                  key: POSTGRES_PASSWORD
            # - secretRef:
            #     name: backstage-secrets
          volumeMounts:
            - name: config-volume
              mountPath: /app/config  
              readOnly: true
      volumes:
        - name: config-volume
          configMap:
            name: backstage-config
---
apiVersion: v1
kind: Service
metadata:
  name: backstage
  namespace: backstage
spec:
  type: ClusterIP
  selector:
    app: backstage
  ports:
    - name: http
      port: 80
      targetPort: http
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: backstage-cert
  namespace: backstage  
spec:
  secretName: backstage-tls  
  issuerRef:
    name: selfsigned-issuer
    kind: Issuer
  commonName: MINIKUBE_IP.nip.io  
  dnsNames:
    - MINIKUBE_IP.nip.io  
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: backstage-ingress
  namespace: backstage
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  tls:
    - hosts:
        - MINIKUBE_IP.nip.io  
      secretName: backstage-tls  
  rules:
    - host: MINIKUBE_IP.nip.io  
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: backstage  
                port:
                  number: 80  
